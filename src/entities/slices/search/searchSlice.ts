import { createAsyncThunk, createSlice } from "@reduxjs/toolkit"
import { IRootState, ISearchState } from "../reduxInterfaces";
import { timeOut } from "entities/Messenger/SearchUsers/api/apiSearch";

const initialState:ISearchState = {
    value: null,
    status: 'idle'
}

export const asyncSearch = createAsyncThunk(
    'search/getUsers',
    async (filter:string) => {
        const response = await timeOut(filter)
        return response
    }
);

export const searchSlice = createSlice({
    name: 'search',
    initialState,
    reducers: {
        clearSearch: (state) => {
            state.value = [];
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(asyncSearch.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(asyncSearch.fulfilled, (state, action) => {
                state.status = 'idle';
                state.value = action.payload;
            });
    },
});

export const { clearSearch } = searchSlice.actions;

export const selectSearch = (state:IRootState) => state.search.value;
export const selectStatus = (state:IRootState) => state.search.status;

export default searchSlice.reducer;